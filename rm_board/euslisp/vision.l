(load "/home/utaro/catkin_ws/jaxon_tutorial/src/rtmros_tutorials/hrpsys_ros_bridge_tutorials/euslisp/jaxon_red-interface.l")
;; (load "./heave.l")
(ros::roseus-add-msgs "opencv_apps")
(ros::load-ros-manifest "jsk_recognition_msgs")

(defvar *bounding-box-llist* nil)
;;colorfilter parameters
;; (jaxon_red-init)
;; (setq *robot* *jaxon_red*)

(ros::roseus "name")
(setq path "/multisense_local/hsi_filter")
(defun param_change (x)
  (cond ((= x 0)
	 (progn
	   ;;red
	   (ros::set-dynamic-reconfigure-param path "h_limit_max" :int 20)
	   (ros::set-dynamic-reconfigure-param path "h_limit_min" :int -20)
	   (ros::set-dynamic-reconfigure-param path "s_limit_max" :int 255)
	   ;; (ros::set-dynamic-reconfigure-param path "s_limit_min" :int 80)
	   (ros::set-dynamic-reconfigure-param path "s_limit_min" :int 0)       
	   (ros::set-dynamic-reconfigure-param path "i_limit_max" :int 255)
	   ;; (ros::set-dynamic-reconfigure-param path "i_limit_min" :int 50)
	   (ros::set-dynamic-reconfigure-param path "i_limit_min" :int 0)       
       (setq str "red")

	   ))
        ((= x 1)
	 (progn
	   ;;green
	   (ros::set-dynamic-reconfigure-param path "h_limit_max" :int 127)
	   (ros::set-dynamic-reconfigure-param path "h_limit_min" :int 66)
	   (ros::set-dynamic-reconfigure-param path "s_limit_max" :int 255)
	   (ros::set-dynamic-reconfigure-param path "s_limit_min" :int 0)       
	   (ros::set-dynamic-reconfigure-param path "i_limit_max" :int 255)
	   (ros::set-dynamic-reconfigure-param path "i_limit_min" :int 0)       
       (setq str "green")
       (ros::set-dynamic-reconfigure-param "/multisense_local/euclidean_clustering" "max_size" :int 100000)
       (ros::set-dynamic-reconfigure-param "/multisense_local/euclidean_clustering" "min_size" :int 300)
	   ))
        
	(t (progn
	     (ros::set-dynamic-reconfigure-param "/multisense_local/euclidean_clustering" "max_size" :int 20000)
	     (ros::set-dynamic-reconfigure-param "/multisense_local/euclidean_clustering" "min_size" :int 100)
	     (ros::set-dynamic-reconfigure-param path "s_limit_max" :int 25)
	     (ros::set-dynamic-reconfigure-param path "h_limit_max" :int 20)
	     (ros::set-dynamic-reconfigure-param path "h_limit_min" :int -20)
	     (ros::set-dynamic-reconfigure-param path "s_limit_max" :int 25)
	      (ros::set-dynamic-reconfigure-param path "s_limit_min" :int 0)
	      (ros::set-dynamic-reconfigure-param path "i_limit_max" :int 255)
	      (ros::set-dynamic-reconfigure-param path "i_limit_min" :int 180)
          (setq str "white")
	      )))
   (ros::ros-warn "param-change ~A" str)
   )

(setq flag t)
(unless (boundp '*rbt*)
  (setq *rbt* (instance jaxon_red-robot :init))
  )

(defun cb_judge (msg)
  (setq handbox-size #f(100 100 100))
  (setq thre-vol 0.5)
  (setq *bounding-box-list* (send msg :boxes))
  (setq vol-total-rarm 0)
  (setq vol-total-larm 0)
  (dotimes (i (length *bounding-box-list*))
    (progn (let* ((b (elt *bounding-box-list* i))
                  (base->obj-coords (ros::tf-pose->coords (send b :pose)))
                  (base-coords (send (send *robot* :body_lk) :copy-worldcoords))
                  (obj-size (scale 1000 (float-vector (send b :dimensions :y) (send b :dimensions :x) (send b :dimensions :z))))) ;;x，y，zの順の調整
             ;; (setq obj-pos (scale 0.001 (send (send base-coords :transform base->obj-coords) :worldpos)))
             (setq obj-pos (scale 1.000 (send (send base-coords :transform base->obj-coords) :worldpos)))
             ;; (setq obj-pos (scale 1.000 (send (send (make-coords) :transform base->obj-coords) :worldpos))) 
             (setq obj-ori (send (send base-coords :transform base->obj-coords) :worldrot))
             
             (format t "obj-pos  = ~A~%" obj-pos)
             (format t "obj-size = ~A~%" obj-size)             
             (setq rarm-coords (send *robot* :rarm :end-coords :copy-worldcoords))
             (setq larm-coords (send *robot* :larm :end-coords :copy-worldcoords))
             (setq rarm-pos (send rarm-coords :worldpos))
             (setq larm-pos (send larm-coords :worldpos))

             (format t "rarm-pos = ~A~%" rarm-pos)
             (format t "larm-pos = ~A~%" larm-pos)
             (setq obj-upper (v+  obj-pos (scale 0.5 obj-size)))
             (setq obj-lower (v-  obj-pos (scale 0.5 obj-size)))   
             (format t "obj-upper = ~A ~%" obj-upper)
             (format t "obj-lower = ~A ~%" obj-lower)
             (setq hand-l-upper (v+ larm-pos (scale 0.5 handbox-size) ))
             (setq hand-l-lower (v- larm-pos (scale 0.5 handbox-size) ))
             (setq hand-r-upper (v+ rarm-pos (scale 0.5 handbox-size) ))
             (setq hand-r-lower (v- rarm-pos (scale 0.5 handbox-size) ))

             (setq width-l (float-vector 0 0 0))
             (setq width-r (float-vector 0 0 0))

             ;; (setq norm-l (abs (norm (v- (float-vector (elt obj-lower 0) (elt obj-upper 1) (elt obj-lower 2)) larm-pos))))
             ;; (setq norm-r (abs (norm (v- (float-vector (elt obj-lower 0) (elt obj-lower 1) (elt obj-lower 2)) rarm-pos))))
             (setq norm-l (abs (norm (v- (float-vector (elt obj-pos 0) (elt obj-upper 1) (elt obj-pos 2)) larm-pos))))
             (setq norm-r (abs (norm (v- (float-vector (elt obj-pos 0) (elt obj-lower 1) (elt obj-pos 2)) rarm-pos))))
             (format t "norm-l = ~A ~%" norm-l)
             (format t "norm-r = ~A ~%" norm-r)
             (dotimes (i 3)
               (if (< norm-l 100)
                   (cond ((and (< (elt obj-lower i) (elt hand-l-lower i)) (< (elt hand-l-lower i) (elt obj-upper i)))
                          (setf (elt width-l i) (- (elt obj-upper i) (elt hand-l-lower i))))
                         ((and (< (elt hand-l-lower i) (elt obj-lower i)) (< (elt obj-upper i) (elt hand-l-upper i)))
                          (setf (elt width-l i)  (- (elt obj-upper i) (elt obj-lower i))))
                         ((and (< (elt obj-lower i) (elt hand-l-upper i)) (< (elt hand-l-upper i) (elt obj-upper i)))
                          (setf (elt width-l i) (- (elt hand-l-upper i) (elt obj-lower i))))
                         ((and (< (elt obj-lower i) (elt hand-l-lower i)) (< (elt hand-l-upper i) (elt obj-upper i)))
                          (setf (elt width-l i) (- (elt hand-l-upper i) (elt hand-l-lower i))))
                         ))
               (if (< norm-r 100)
                   (cond ((and (< (elt obj-lower i) (elt hand-r-lower i)) (< (elt hand-r-lower i) (elt obj-upper i)))
                          (setf (elt width-r i) (- (elt obj-upper i) (elt hand-r-lower i))))
                         ((and (< (elt hand-r-lower i) (elt obj-lower i)) (< (elt obj-upper i) (elt hand-r-upper i)))
                          (setf (elt width-r i)  (- (elt obj-upper i) (elt obj-lower i))))
                         ((and (< (elt obj-lower i) (elt hand-r-upper i)) (< (elt hand-r-upper i) (elt obj-upper i)))
                          (setf (elt width-r i) (- (elt hand-r-upper i) (elt obj-lower i))))
                         ((and (< (elt obj-lower i) (elt hand-r-lower i)) (< (elt hand-r-upper i) (elt obj-upper i)))
                          (setf (elt width-r i) (- (elt hand-r-upper i) (elt hand-r-lower i))))
                         ))
               
               )

           (ros::ros-warn "width-r = ~A" width-r)
           (ros::ros-warn "width-l = ~A" width-l)
           
           (setq vol-larm (* (elt width-l 0) (elt width-l 1) (elt width-l 2)))
           (setq vol-total-larm (+ vol-larm vol-total-larm))
           (setq vol-rarm (* (elt width-r 0) (elt width-r 1) (elt width-r 2)))
           (setq vol-total-rarm (+ vol-rarm vol-total-rarm))
           )
           ))
  
  (setq handbox-vol (* (elt handbox-size 0) (elt handbox-size 1) (elt handbox-size 2)))
  (format t "vol-total-larm = ~A~%" vol-total-larm)
  (format t "vol-total-rarm = ~A~%" vol-total-rarm)
  (if (> (/ (* 1.0 vol-total-rarm) handbox-vol) thre-vol)
      (print "rarm holding")
    (print "rarm-drop"))
  (if (> (/ (* 1.0 vol-total-larm) handbox-vol) thre-vol)
      (print "larm holding")
    (print "larm drop"))
  )

           

           
  ;; (ros::ros-warn "flag~A" flag))

(ros::subscribe "multisense_local/boxes" jsk_recognition_msgs::BoundingBoxArray #'cb_judge)


(defun main ()
  ;; (init)
  (param_change 1)
  (do-until-key
   (ros::sleep)
   (ros::spin-once))
  )
