#!/usr/bin/env roseus
(ros::load-ros-manifest "rm_debris_vision")
(ros::roseus "make_plane_for_ik_client")
(ros::wait-for-service "make_plane")
(defun make_plane()

(setq req (instance rm_debris_vision::PolygonRequest :init))
(setq res (ros::service-call "make_plane" req t))
;; (print res)

(setq coords (make-coords))
(setq com-box (make-cube 100 100 100))
(send com-box :set-color #f(1 0 0))

(setq vertices (mapcar #'(lambda (vertice) (scale 1000 (float-vector (send vertice :x) (send vertice :y) (send vertice :z)))) (send res :pts :polygon :points)))
  ;; (setq len (length vertices))
  ;; (setq sum_x 0)
  ;; (setq sum_y 0)
  ;; (setq sum_z 0)
  ;; (setq ave 0)
  ;; (dotimes (i len)
  ;;     (setq sum_x (+ sum_x (elt (elt vertices i) 0)))
  ;;     (setq sum_y (+ sum_y (elt (elt vertices i) 1)))
  ;;     (setq sum_z (+ sum_z (elt (elt vertices i) 2)))      
  ;;     ) 
  ;; (setq ave  (float-vector (/ sum_x (float len)) (/ sum_y (float len)) (/ sum_z (float len))))
  ;; (setq tmp ave)
  ;; (format t "com = ~A~%" (scale 0.001 ave))
  ;; (send com :translate  tmp)
(setq my-plane (make-prism vertices 10))
(setq com (scale 1 (send my-plane :centroid)))
;; (print com)
(send com-box :translate com)
(objects (list my-plane com-box coords))
(send com-box :translate (scale -1 com))
 my-plane
)                                       
