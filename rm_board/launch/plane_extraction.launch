<launch>
  <arg name="input_cloud"
       default="/rs_l515/depth_registered/points" />
  <!-- default="/multisense_local/organized_image_points2_color" /> -->  
  <!-- <arg name="camera_info" -->
  <!--      default="/multisense_local/left/camera_info" />   -->
  <arg name="transformed_cloud"
       default="transform_org_cloud/output" />
  <arg name="filtered_cloud"
       default="extract_indices/output" />
  <arg name="masked_cloud"
       default="mask_extract_indices/output" />
  <arg name="frame_id"
       default="odom_ground" />  
  
  <arg name="manager" default="plane_extraction_manager" />

  <!-- <rosparam param="/use_sim_time">true</rosparam> -->

  <!-- 自作  -->
  <!-- <node pkg="rm_debris_vision" name="get_plane" type="get_plane.py" output="screen" > -->
  <!-- <remap from="~output" to="~focus_plane" /> -->
  <!-- </node> -->
  <node pkg="rm_debris_vision" name="get_plane" type="get_plane_with_service.py" output="screen" />    
  <node pkg="rm_debris_vision" name="make_plane_realtime" type="make_plane_for_ik.l" output="screen" />
  <node pkg="rm_debris_vision" name="make_plane_for_ik_loop" type="make_plane_for_ik_server.l" output="screen" />
  <node pkg="rm_debris_vision" name="change_clip_box" type="change_clip_box_server.l" output="screen" />
  <!-- <node pkg="rm_debris_vision" name="hz_down" type="hz_down_realsense.py" output="screen" /> -->
  <!-- <node pkg="rm_debris_vision" name="switch_input_cloud" type="switch_input_cloud.py" output="screen" /> -->
  <node pkg="rm_debris_vision" name="predict_k_server" type="predict_k_server.py" output="screen" />

  <group ns="plane_extraction">
    <node name="$(arg manager)"
          pkg="nodelet" type="nodelet"
          args="manager" output="screen" />

    <node name="bounding_box_array_publisher"
          pkg="jsk_recognition_utils" type="bounding_box_array_publisher.py">
      <rosparam>
        frame_id: odom_ground
        boxes:
        - position: [1, 0, 0.95]
          dimension: [3, 2.0, 2]
      </rosparam>
    </node>
        <!-- - position: [1, 0, 1.1] -->
        <!--   dimension: [3, 1.5, 2] -->
        
    <node name="attention_clipper"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/AttentionClipper $(arg manager)">
      <remap from="~input/points" to="$(arg input_cloud)" />
      <!-- <remap from="~input/points" to="$(arg transformed_cloud)" /> -->
      <!-- <remap from="~input/points" to="$(arg input_cloud)" /> -->
      <remap from="~input/box_array" to="bounding_box_array_publisher/output" />
      <rosparam>
        use_multiple_attention: true
      </rosparam>
    </node>

    <node name="extract_indices"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/ExtractIndices $(arg manager)">
      <!-- <remap from="~input" to="$(arg transformed_cloud)" /> -->
      <remap from="~input" to="$(arg input_cloud)" />
      <remap from="~indices" to="attention_clipper/output/point_indices" />
      <rosparam>
        keep_organized: true
      </rosparam>
    </node>

    <node name="transform_org_cloud"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl_utils/TfTransformCloud $(arg manager)">
      <remap from="~input" to="extract_indices/output" />
      <rosparam>
        target_frame_id: odom_ground
      </rosparam>
    </node>

    <!-- 平面検出 -->
    <node name="plane_segmentation"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/OrganizedMultiPlaneSegmentation $(arg manager)">
      <remap from="~input" to="$(arg transformed_cloud)" />
      <remap from="~output_refined" to="plane_cluster_indices" />
      <remap from="~output_refined_polygon" to="plane_polygons" />
      <remap from="~output_refined_coefficients" to="plane_coefficients" />

      <param name="~min_size" value="500" />
      <param name="~max_curvature" value="0.01" />
      <param name="~distance_threshold" value="0.03" />
      <param name="~angular_threshold" value="0.05" />
      <param name="~connect_plane_angle_threshold" value="0.1" />
    </node>
  
    <node name="plane_normal_filter"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl_utils/PlaneRejector $(arg manager)">
      <remap from="~input_polygons" to="plane_polygons" />
      <remap from="~input_coefficients" to="plane_coefficients" />
      <remap from="~input_inliers" to="plane_cluster_indices" />
      <remap from="~output_polygons" to="filtered_plane_polygons" />
      <remap from="~output_coefficients" to="filtered_plane_coefficients" />
      <remap from="~output_inliers" to="filtered_plane_cluster_indices" />

      <param name="~processing_frame_id" value="map" />
      <param name="~use_inliers" value="true" />
      <param name="~arrow_flip" value="false" />
      <rosparam param="reference_axis">[0, 0, 1]</rosparam>
      <rosparam>
        angle: 0.0
        angle_thrfd: 0.17
      </rosparam>
    </node>

    <node name="plane_decomposer"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/ClusterPointIndicesDecomposer $(arg manager)">
      <remap from="~input" to="$(arg transformed_cloud)" />
      <!-- <remap from="~target" to="filtered_plane_cluster_indices" /> -->
      <remap from="~target" to="plane_cluster_indices" />
      <remap from="~align_planes" to="plane_polygons"/>
      <remap from="~align_planes_coefficients" to="plane_coefficients"/>
      <remap from="~negative_indices" to="not_plane_indices" />
      <rosparam>
        use_pca: true
        sort_by: "z_axis"
        align_boxes: true
        align_boxes_with_plane: true
        fill_boxes_label_with_nearest_plane_index: true
      </rosparam>
    </node>

    <!-- 平面のエッジ検出 -->

    <!-- <node name="organized_edge_detector" -->
    <!--       pkg="nodelet" type="nodelet" -->
    <!--       args="load jsk_pcl/OrganizedEdgeDetector $(arg manager)"> -->
    <!--   <remap from="~input" to="$(arg filtered_cloud)" /> -->
    <!--   <remap from="~/output_rgb_edge_indices" to="edge_indices" /> -->
    <!--   <remap from="~/output_rgb_edge" to="edge_cloud" /> -->
    <!--   <remap from="~/output_straight_edges_indices" to="straight_edge_indices" /> -->
    <!--   <remap from="~/output" to="edge_cloud" /> -->
    <!--   <rosparam> -->
    <!--     publish_normal: true -->
    <!--     use_nan_boundary: true -->
    <!--     use_rgb: true -->
    <!--     use_straightline_detection: true -->
    <!--     min_line_length: 1000 -->
    <!--   </rosparam> -->
    <!-- </node> -->

    <!-- <node name="multi_plane_extraction" -->
    <!--       pkg="nodelet" type="nodelet" -->
    <!--       args="load jsk_pcl/MultiPlaneExtraction  $(arg manager)"> -->
    <!--   <remap from="~input" to="edge_cloud"/> -->
    <!--   <remap from="~indices" to="edge_indices"/> -->
      <!-- <remap from="~input_polygons" to="plane_polygons"/> -->
      <!-- <remap from="~input_coefficients" to="plane_coefficients"/> -->
    <!--   <remap from="~input_polygons" to="/get_plane/output_polygon"/> -->
    <!--   <remap from="~input_coefficients" to="/get_plane/output_coefficient"/> -->
    <!--   <rosparam> -->
    <!--     keep_organized: false -->
    <!--     use_indices: true -->
    <!--     use_coefficients: true -->
    <!--     min_height: -0.1 -->
    <!--     max_height: 0.1 -->
    <!--   </rosparam> -->
    <!-- </node> -->
  </group>  <!-- end of plane_extraction namespace-->

  
  <arg name="grid_cloud" value="voxelgrid/output" />
  <group ns="stick_pose">
    <node name="line_segment_manager"
          pkg="nodelet" type="nodelet"
          args="manager" output="screen" />

    <node name="bounding_box_array_publisher"
          pkg="jsk_recognition_utils" type="bounding_box_array_publisher.py">
      <rosparam>
        frame_id: odom_ground
        boxes:
        - position: [1, 0, 1.25]
          dimension: [2, 1.5, 2]
      </rosparam>
    </node>

    <node name="voxelgrid"
          pkg="nodelet" type="nodelet"
          args="load pcl/VoxelGrid line_segment_manager"
          output="screen">
      <remap from="~input" to="$(arg input_cloud)" />    
      <rosparam>
        filter_field_name: z
        filter_limit_min: 0.0
        filter_limit_max: 5.0
        leaf_size: 0.01
      </rosparam>
    </node>

    <node name="attention_clipper"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/AttentionClipper line_segment_manager">
      <remap from="~input/points" to="$(arg grid_cloud)" />
      <remap from="~input/box_array" to="bounding_box_array_publisher/output" />
      <rosparam>
        use_multiple_attention: true
      </rosparam>
    </node>

    <node name="extract_indices"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/ExtractIndices line_segment_manager">
      <remap from="~input" to="$(arg grid_cloud)" />
      <remap from="~indices" to="attention_clipper/output/point_indices" />
      <rosparam>
        keep_organized: true
      </rosparam>
    </node>

    <node name="transform_org_cloud"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl_utils/TfTransformCloud line_segment_manager">
      <remap from="~input" to="extract_indices/output" />
      <rosparam>
        target_frame_id: odom_ground
      </rosparam>
    </node>
    
    <node name="euclidean_clustering"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/EuclideanClustering line_segment_manager"
          output="screen">
      <remap from="~input" to="transform_org_cloud/output" />    
      <rosparam>
        max_size: 100000
        min_size: 110
      </rosparam>
    </node>

    <node name="euclidean_clustering_decomposer"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/ClusterPointIndicesDecomposerZAxis line_segment_manager"
          output="screen">
      <remap from="~input" to="transform_org_cloud/output" />    
      <remap from="~target" to="euclidean_clustering/output" />
      <rosparam>
        max_size: 100000
        min_size: 110
        use_pca: true
        sort_by: "z_axis"
      </rosparam>
    </node>

    <node name="line_segment_detector"
          pkg="nodelet" type="nodelet"
          args="standalone jsk_pcl/LineSegmentDetector"
          output="screen">
      <remap from="~input" to="transform_org_cloud/output" />
      <remap from="~input_indices" to="euclidean_clustering/output" />
      <rosparam>
        outlier_threshold: 0.04
        max_iteration: 10000
        min_indices: 10
        min_length: 0.3
      </rosparam>
    </node>
  </group>
  <!-- <node pkg="rgbd_self_filter" name="get_plane" type="get_plane.py" output="screen"/> -->
  <!-- <node name="rviz" -->
  <!--       pkg="rviz" type="rviz" -->
  <!--       args="-d /home/utaro/research/rm_debris/rm_board/display/plane_extraction.rviz"/> -->
  
</launch>

